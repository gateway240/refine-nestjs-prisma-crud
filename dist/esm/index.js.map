{"version":3,"sources":["../../src/utils/mapOperator.ts","../../src/utils/handleFilter.ts","../../src/utils/handleJoin.ts","../../src/utils/handlePagination.ts","../../src/utils/handleSort.ts","../../src/utils/axios.ts","../../src/utils/transformErrorMessages.ts","../../src/utils/transformHttpError.ts","../../src/provider.ts","../../src/index.ts"],"sourcesContent":["import { CrudOperators } from \"@refinedev/core\";\n\nexport const mapOperator = (operator: CrudOperators) => {\n  switch (operator) {\n    case \"and\":\n      return \"AND\";\n    case \"or\":\n      return \"OR\";\n    case \"eq\":\n      // return CondOperator.EQUALS;\n    case \"ne\":\n      // return CondOperator.NOT_EQUALS;\n    case \"lt\":\n      // return CondOperator.LOWER_THAN;\n    case \"gt\":\n      // return CondOperator.GREATER_THAN;\n    case \"lte\":\n      // return CondOperator.LOWER_THAN_EQUALS;\n    case \"gte\":\n      // return CondOperator.GREATER_THAN_EQUALS;\n    case \"in\":\n      // return CondOperator.IN;\n    case \"nin\":\n      // return CondOperator.NOT_IN;\n    case \"contains\":\n      // return CondOperator.CONTAINS_LOW;\n    case \"ncontains\":\n      return \"notIn\";\n    case \"containss\":\n      // return CondOperator.CONTAINS;\n    case \"ncontainss\":\n      // return CondOperator.EXCLUDES;\n    case \"null\":\n      // return CondOperator.IS_NULL;\n    case \"nnull\":\n      // return CondOperator.NOT_NULL;\n    case \"startswith\":\n      // return CondOperator.STARTS_LOW;\n    case \"startswiths\":\n      // return CondOperator.STARTS;\n    case \"endswith\":\n      // return CondOperator.ENDS_LOW;\n    case \"endswiths\":\n      // return CondOperator.ENDS;\n    default:\n      return \"\";\n  }\n};\n","import { CrudFilters, CrudFilter } from \"@refinedev/core\";\nimport { mapOperator } from \"./mapOperator\";\nimport { CrudQueryObj, CrudWhere } from 'nestjs-prisma-crud';\n\nexport const generateSearchFilter = (filters: CrudFilters): CrudWhere => {\n  return createSearchQuery({\n    operator: \"and\",\n    value: filters,\n  });\n};\n\nexport const createSearchQuery = (filter: CrudFilter): CrudWhere => {\n  if (\n    filter.operator !== \"and\" &&\n    filter.operator !== \"or\" &&\n    \"field\" in filter\n  ) {\n    if (filter.operator === \"eq\") {\n      return {[filter.field]: filter.value}\n    }\n    // query\n    return {\n      [filter.field]: {\n        [mapOperator(filter.operator)]: filter.value,\n      },\n    };\n  }\n\n  const { operator } = filter;\n\n  return {\n    [mapOperator(operator)]: filter.value.map((filter) =>\n      createSearchQuery(filter)\n    ),\n  };\n};\n\nexport const handleFilter = (\n  query: CrudQueryObj,\n  filters?: CrudFilters\n) => {\n  if (filters && query) {\n    query.where = generateSearchFilter(filters);\n  }\n  return query;\n};\n","import { CrudQueryObj } from \"nestjs-prisma-crud\";\n\nexport const handleJoin = (\n  query: CrudQueryObj,\n  join?: string[]\n) => {\n  if (join) {\n    // query.setJoin(join);\n  }\n  return query;\n};\n","import { Pagination } from \"@refinedev/core\";\nimport { CrudQueryObj } from 'nestjs-prisma-crud';\n\nexport const handlePagination = (\n  query: CrudQueryObj,\n  pagination?: Pagination\n) => {\n  const { current = 1, pageSize = 10, mode = \"server\" } = pagination ?? {};\n\n  if (mode === \"server\") {\n    query.pageSize = pageSize\n    query.page = current\n  }\n\n  return query;\n};\n","import { CrudSorting } from \"@refinedev/core\";\nimport { CrudQuery } from \"nestjs-prisma-crud\";\n\nexport type SortBy = Array<any>;\n\nexport const generateSort = (sort?: CrudSorting): SortBy | undefined => {\n  if (sort && sort.length > 0) {\n    const multipleSort: SortBy = [];\n    sort.map(({ field, order }) => {\n      if (field && order) {\n        multipleSort.push({\n          field: field,\n          order: order.toUpperCase(),\n        });\n      }\n    });\n    return multipleSort;\n  }\n\n  return;\n};\n\nexport const handleSort = (\n  query: CrudQuery,\n  sorters?: CrudSorting\n) => {\n  const sortBy = generateSort(sorters);\n  if (sortBy) {\n    // query.sortBy(sortBy);\n  }\n\n  return query;\n};\n","import { HttpError } from \"@refinedev/core\";\nimport axios from \"axios\";\n\nexport const axiosInstance = axios.create();\n\naxiosInstance.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    const customError: HttpError = {\n      ...error,\n      message: error.response?.data?.message,\n      statusCode: error.response?.status,\n    };\n\n    return Promise.reject(customError);\n  }\n);\n","type TransformedErrors = {\n  [key: string]: string[];\n};\n\nexport const transformErrorMessages = (\n  errorMessages: string[]\n): TransformedErrors => {\n  const transformedErrors: TransformedErrors = {};\n\n  for (const errorMessage of errorMessages) {\n    const separatorIndex = errorMessage.indexOf(\" \");\n    const field = errorMessage.substring(0, separatorIndex);\n\n    if (transformedErrors[field]) {\n      transformedErrors[field].push(errorMessage);\n    } else {\n      transformedErrors[field] = [errorMessage];\n    }\n  }\n\n  return transformedErrors;\n};\n","import { HttpError } from \"@refinedev/core\";\nimport { transformErrorMessages } from \"./transformErrorMessages\";\n\nexport const transformHttpError = (error: any): HttpError => {\n  const message = error.response.data.error;\n  const statusCode = error.response.data.statusCode;\n  const errorMessages = error.response.data.message;\n\n  const errors = transformErrorMessages(errorMessages);\n\n  const httpError: HttpError = {\n    statusCode,\n    message,\n    errors,\n  };\n\n  return httpError;\n};\n","import { DataProvider, HttpError } from \"@refinedev/core\";\nimport {\n  axiosInstance,\n  handleFilter,\n  handleJoin,\n  handlePagination,\n  handleSort,\n  transformHttpError,\n} from \"./utils\";\nimport { AxiosInstance } from \"axios\";\nimport { stringify } from \"query-string\";\nimport { CrudQuery } from 'nestjs-prisma-crud';\n\nexport const dataProvider = (\n  apiUrl: string,\n  httpClient: AxiosInstance = axiosInstance\n): Required<DataProvider> => ({\n  getList: async ({ resource, pagination, filters, sorters, meta }) => {\n    const url = `${apiUrl}/${resource}`;\n\n\n    let query: CrudQuery = {};\n\n    query = handlePagination(query, pagination);\n    query = handleFilter(query, filters);\n\n    // let crudQuery: CrudQuery = {\n    //   where: handleFilter(query, filters),\n    //   joins: handleJoin(query, meta?.join),\n    //   // select?: {\n    //   //     only?: string[];\n    //   //     except?: string[];\n    //   // },\n    //   orderBy: handleSort(query, sorters),\n    //   // page?: number;\n    //   // pageSize?: number;\n    // }\n\n    // query = handleFilter(query, filters);\n    // query = handleJoin(query, meta?.join);\n    // query = handlePagination(query, pagination);\n    // query = handleSort(query, sorters);\n\n    const { data } = await httpClient.get(`${url}?${new URLSearchParams({ crudQuery: JSON.stringify(query) })}`);\n\n    // without pagination\n    if (Array.isArray(data)) {\n      return {\n        data,\n        total: data.length,\n      };\n    } else {\n      // with pagination\n      return {\n        data: data.data,\n        total: data.totalRecords,\n      };\n    }\n  },\n\n  getMany: async ({ resource, ids, meta }) => {\n    const url = `${apiUrl}/${resource}`;\n\n    let query: CrudQuery = {};\n    // let query = RequestQueryBuilder.create().setFilter({\n    //   field: \"id\",\n    //   operator: CondOperator.IN,\n    //   value: ids,\n    // });\n\n    query = handleJoin(query, meta?.join);\n\n    const { data } = await httpClient.get(`${url}?${new URLSearchParams({ crudQuery: JSON.stringify(query) })}`);\n\n    return {\n      data,\n    };\n  },\n\n  create: async ({ resource, variables }) => {\n    const url = `${apiUrl}/${resource}`;\n\n    try {\n      const { data } = await httpClient.post(url, variables);\n\n      return {\n        data,\n      };\n    } catch (error) {\n      const httpError = transformHttpError(error);\n\n      throw httpError;\n    }\n  },\n\n  update: async ({ resource, id, variables }) => {\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    try {\n      const { data } = await httpClient.patch(url, variables);\n\n      return {\n        data,\n      };\n    } catch (error) {\n      const httpError = transformHttpError(error);\n\n      throw httpError;\n    }\n  },\n\n  updateMany: async ({ resource, ids, variables }) => {\n    const errors: HttpError[] = [];\n\n    const response = await Promise.all(\n      ids.map(async (id) => {\n        try {\n          const { data } = await httpClient.patch(\n            `${apiUrl}/${resource}/${id}`,\n            variables\n          );\n          return data;\n        } catch (error) {\n          const httpError = transformHttpError(error);\n\n          errors.push(httpError);\n        }\n      })\n    );\n\n    if (errors.length > 0) {\n      throw errors;\n    }\n\n    return { data: response };\n  },\n\n  createMany: async ({ resource, variables }) => {\n    const url = `${apiUrl}/${resource}/bulk`;\n\n    try {\n      const { data } = await httpClient.post(url, { bulk: variables });\n\n      return {\n        data,\n      };\n    } catch (error) {\n      const httpError = transformHttpError(error);\n\n      throw httpError;\n    }\n  },\n\n  getOne: async ({ resource, id, meta }) => {\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    let query: CrudQuery = {};\n\n    query = handleJoin(query, meta?.join);\n\n    const { data } = await httpClient.get(`${url}?${new URLSearchParams({ crudQuery: JSON.stringify(query) })}`);\n\n    return {\n      data,\n    };\n  },\n\n  deleteOne: async ({ resource, id }) => {\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    const { data } = await httpClient.delete(url);\n\n    return {\n      data,\n    };\n  },\n\n  deleteMany: async ({ resource, ids }) => {\n    const response = await Promise.all(\n      ids.map(async (id) => {\n        const { data } = await httpClient.delete(`${apiUrl}/${resource}/${id}`);\n        return data;\n      })\n    );\n    return { data: response };\n  },\n\n  getApiUrl: () => {\n    return apiUrl;\n  },\n\n  custom: async ({\n    url,\n    method,\n    meta,\n    filters,\n    sorters,\n    payload,\n    query,\n    headers,\n  }) => {\n    let requestQueryBuilder: CrudQuery = {};\n\n    // requestQueryBuilder = handleFilter(requestQueryBuilder, filters);\n\n    requestQueryBuilder = handleJoin(requestQueryBuilder, meta?.join);\n\n    requestQueryBuilder = handleSort(requestQueryBuilder, sorters);\n\n    let requestUrl = `${url}?${new URLSearchParams({ crudQuery: JSON.stringify(requestQueryBuilder) })}`;\n\n    if (query) {\n      requestUrl = `${requestUrl}&${stringify(query)}`;\n    }\n\n    let axiosResponse;\n    switch (method) {\n      case \"put\":\n      case \"post\":\n      case \"patch\":\n        axiosResponse = await httpClient[method](url, payload, {\n          headers,\n        });\n        break;\n      case \"delete\":\n        axiosResponse = await httpClient.delete(url, {\n          data: payload,\n          headers: headers,\n        });\n        break;\n      default:\n        axiosResponse = await httpClient.get(requestUrl, { headers });\n        break;\n    }\n\n    const { data } = axiosResponse;\n\n    return Promise.resolve({ data });\n  },\n});\n","import { dataProvider } from \"./provider\";\n\nexport default dataProvider;\n\nexport * from \"./utils\";\n"],"mappings":"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","names":["mapOperator","operator","generateSearchFilter","filters","createSearchQuery","filter","mapOperator","operator","handleFilter","query","handleJoin","query","join","handlePagination","query","pagination","current","pageSize","mode","generateSort","sort","multipleSort","field","order","handleSort","query","sorters","sortBy","axios","axiosInstance","response","error","customError","transformErrorMessages","errorMessages","transformedErrors","errorMessage","separatorIndex","field","transformHttpError","error","message","statusCode","errorMessages","errors","transformErrorMessages","stringify","dataProvider","apiUrl","httpClient","axiosInstance","resource","pagination","filters","sorters","meta","url","query","handlePagination","handleFilter","data","ids","handleJoin","variables","error","transformHttpError","id","errors","response","httpError","method","payload","headers","requestQueryBuilder","handleSort","requestUrl","axiosResponse","src_default","dataProvider"]}